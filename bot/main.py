import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv
from stats import load_stats, save_stats, get_user_stats
from handlers.miner import miner_router
from handlers.rps import rps_router
from handlers.guess import guess_router
from handlers.coin import coin_router

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(miner_router)
dp.include_router(rps_router)
dp.include_router(guess_router)
dp.include_router(coin_router)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_stats = {}

def get_user_stats(user_id):
    if user_id not in user_stats:
        user_stats[user_id] = {"miner": 0, "coin": 0, "guess": 0, "rps": 0}
    return user_stats[user_id]

def get_game_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üß® –ú–∏–Ω—ë—Ä", callback_data="game_miner")],
        [InlineKeyboardButton(text="ü™ô –û—Ä—ë–ª/–†–µ—à–∫–∞", callback_data="game_coin")],
        [InlineKeyboardButton(text="üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data="game_guess")],
        [InlineKeyboardButton(text="‚úÇÔ∏è –ö–ù–ë", callback_data="game_rps")],
    ])

@dp.message(Command("start"))
async def cmd_start(message: Message):
    name = message.from_user.full_name
    username = message.from_user.username or "–Ω–µ—Ç –Ω–∏–∫–∞"
    stats = get_user_stats(message.from_user.id)

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name} (@{username})!\n\n"
        f"üéÆ –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üß® –ú–∏–Ω—ë—Ä: {stats['miner']} –ø–æ–±–µ–¥\n"
        f"ü™ô –û—Ä—ë–ª/–†–µ—à–∫–∞: {stats['coin']} –ø–æ–±–µ–¥\n"
        f"üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ: {stats['guess']} –ø–æ–±–µ–¥\n"
        f"‚úÇÔ∏è –ö–ù–ë: {stats['rps']} –ø–æ–±–µ–¥\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:"
    )

    await message.answer(text, reply_markup=get_game_menu())

@dp.callback_query(F.data.startswith("game_"))
async def launch_game(callback: CallbackQuery):
    game = callback.data.replace("game_", "")
    commands = {
        "miner": "/miner ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –ú–∏–Ω—ë—Ä",
        "coin": "/coin ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ –û—Ä—ë–ª/–†–µ—à–∫—É",
        "guess": "/guess ‚Äî –Ω–∞—á–∞—Ç—å —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞",
        "rps": "/rps ‚Äî –Ω–∞—á–∞—Ç—å –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞"
    }

    if game in commands:
        await callback.message.answer(commands[game])
    await callback.answer()

async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="miner", description="–ú–∏–Ω—ë—Ä"),
        BotCommand(command="coin", description="–û—Ä—ë–ª/–†–µ—à–∫–∞"),
        BotCommand(command="guess", description="–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"),
        BotCommand(command="rps", description="–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞")
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())