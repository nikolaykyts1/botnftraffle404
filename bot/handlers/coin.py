from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import random

from db import increment_stat  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

coin_router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
def coin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ä—ë–ª", callback_data="coin_heads"),
            InlineKeyboardButton(text="–†–µ—à–∫–∞", callback_data="coin_tails")
        ]
    ])

@coin_router.message(Command("coin"))
async def start_coin(message: Message):
    await message.answer("ü™ô –í—ã–±–µ—Ä–∏—Ç–µ: –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞", reply_markup=coin_keyboard())

@coin_router.callback_query(F.data.startswith("coin_"))
async def coin_result(callback: CallbackQuery):
    user_choice = callback.data.split("_")[1]
    result = random.choice(["heads", "tails"])

    if user_choice == result:
        increment_stat(callback.from_user.id, "coin_wins")
        await callback.message.edit_text(f"üéâ –í—ã–ø–∞–ª–æ: {'–û—Ä—ë–ª' if result == 'heads' else '–†–µ—à–∫–∞'}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
    else:
        await callback.message.edit_text(f"üò¢ –í—ã–ø–∞–ª–æ: {'–û—Ä—ë–ª' if result == 'heads' else '–†–µ—à–∫–∞'}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")

    await callback.answer()